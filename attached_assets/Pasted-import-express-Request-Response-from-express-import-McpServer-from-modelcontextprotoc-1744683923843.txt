import express, { Request, Response } from "express";
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";
import * as dotenv from "dotenv";

// Load environment variables
dotenv.config();

const server = new McpServer({
  name: "mcp-coda",
  version: "1.0.0",
});

const app = express();

// to support multiple simultaneous connections we have a lookup object from
// sessionId to transport
const transports: { [sessionId: string]: SSEServerTransport } = {};

app.get("/sse", async (_: Request, res: Response) => {
  const transport = new SSEServerTransport("/messages", res);
  transports[transport.sessionId] = transport;
  res.on("close", () => {
    delete transports[transport.sessionId];
  });
  console.log(
    `New SSE connection established, sessionId: ${transport.sessionId}`
  );
  await server.connect(transport);
});

app.post("/messages", async (req: Request, res: Response) => {
  const sessionId = req.query.sessionId as string;
  const transport = transports[sessionId];
  if (transport) {
    await transport.handlePostMessage(req, res);
  } else {
    res.status(400).send("No transport found for sessionId");
  }
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`MCP server running at http://localhost:${PORT}`);
});


----

part of code to fetch coda tables:

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { z } from "zod";
import * as dotenv from "dotenv";

// Load environment variables
dotenv.config();

/**
 * Registers the Coda tables fetching tool to the MCP server
 *
 * @param server The MCP server instance
 */
export function registerFetchCodaTablesTools(server: McpServer) {
  /**
   * Fetches all tables from a specified Coda document
   *
   * @param {Object} params - The parameters for the tool
   * @param {string} params.docId - The ID of the Coda document to fetch tables from
   * @returns {Object} Response containing either the tables data or an error message
   */
  server.tool("fetch-coda-tables", { docId: z.string() }, async ({ docId }) => {
    const apiKey = process.env.CODA_API_KEY;
    if (!apiKey) {
      return {
        content: [
          {
            type: "text",
            text: "Error: CODA_API_KEY not found in environment variables",
          },
        ],
      };
    }

    try {
      const response = await fetch(
        `https://coda.io/apis/v1/docs/${docId}/tables`,
        {
          method: "GET",
          headers: {
            Authorization: `Bearer ${apiKey}`,
            "Content-Type": "application/json",
          },
        }
      );

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`API Error: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(data, null, 2),
          },
        ],
      };
    } catch (error: unknown) {
      const errorMessage =
        error instanceof Error ? error.message : String(error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching tables: ${errorMessage}`,
          },
        ],
      };
    }
  });
}
